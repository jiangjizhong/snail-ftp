/*
 * FTPView.java
 *
 * Created on 2008年8月16日, 下午6:45
 */
package snailftp.view;

import snailftp.queuefile.QueueFile;
import snailftp.queuefile.FileUploadQueueFile;
import snailftp.queuefile.DirectoryDownloadQueueFile;
import snailftp.queuefile.DirectoryUploadQueueFile;
import snailftp.queuefile.FileDownloadQueueFile;
import snailftp.*;
import java.io.*;
import java.util.*;
import javax.swing.table.*;
import java.awt.Color;
import java.awt.EventQueue;
import java.awt.event.*;
import javax.swing.filechooser.FileSystemView;
import javax.swing.*;
import javax.swing.text.*;
import snailftp.FTPModel.State;
import snailftp.command.*;
import java.util.concurrent.*;
import snailftp.site.*;
import snailftp.config.Config;
/**
 *
 * @author  jiangjizhong
 */
public class FTPView extends javax.swing.JFrame
        implements OverridePolicyMaker, CommandObserver, ReplyObserver, FileQueueObserver,
        FTPFileListObserver, CurrentDirectoryObserver, FileTransmitObserver,
        ModelStateObserver, MessageObserver, Runnable {

    static final FileSystemView fileSystemView = FileSystemView.getFileSystemView();
    FTPController controller;
    FTPModel model;
    FileQueue queue;
    Thread commandInvoker;
    BlockingQueue<Command> commandQueue = new LinkedBlockingQueue<Command>();
    Site site = null;
    Config config = Config.getInstance();
    /**
     * 只在队列为空时才把命令添加到队列中，如果队列不为空则丢弃命令
     * @param command
     */
    private synchronized void setCommand(Command command) {
        if (commandQueue.isEmpty()) {
            commandQueue.offer(command);
        } else {
            System.out.println("丢弃命令" + command);
        }
    }

    /**
     * 把命令添加到队列中(如果空间足够)
     * @return
     */
    private synchronized void addCommand(Command command) {
        commandQueue.offer(command);
    }

    /** Creates new form FTPView */
    public FTPView(FTPController controller, FTPModel model, FileQueue queue) {
        super("FTP");
        this.model = model;
        this.controller = controller;
        model.addCommandObserver(this);
        model.addCurrentDirectoryObserver(this);
        model.addReplyObserver(this);
        model.addFileListObserver(this);
        model.setOverridePolicyMaker(this);
        model.addFileTransmitObserver(this);
        model.addModelStateObserver(this);
        model.addMessageObserver(this);
        queue.addObserver(this);
        initComponents();
        this.getAntiIdleConfig();
        commandInvoker = new Thread(this);
        commandInvoker.start();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        localFileListMenu = new javax.swing.JPopupMenu();
        localFileUploadMenu = new javax.swing.JMenuItem();
        localFileToQueueMenu = new javax.swing.JMenuItem();
        remoteFileTableMenu = new javax.swing.JPopupMenu();
        remoteFileDownloadMenu = new javax.swing.JMenuItem();
        remoteFileToQueueMenu = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        remoteFileRenameMenu = new javax.swing.JMenuItem();
        remoteFileRemoveMenu = new javax.swing.JMenuItem();
        remoteFileMakeDirMenu = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        remoteFileRefreshMenu = new javax.swing.JMenuItem();
        queueFileTableMenu = new javax.swing.JPopupMenu();
        transmitMenu = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        queueFileRemoveMenu = new javax.swing.JMenuItem();
        queueFileToHeadMenu = new javax.swing.JMenuItem();
        queueFileToTailMenu = new javax.swing.JMenuItem();
        queueFileClearMenu = new javax.swing.JMenuItem();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        wokDirectory = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        remoteFileTable = new javax.swing.JTable();
        workDirectoryUp = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        localDirectoryComboBox = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        localFileList = new javax.swing.JList();
        pwdLabel = new javax.swing.JLabel();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        queueFileTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        displayArea = new javax.swing.JTextPane();
        jPanel2 = new javax.swing.JPanel();
        host = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        password = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();
        port = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        status = new javax.swing.JLabel();
        transmitProgressBar = new javax.swing.JProgressBar();
        jLabel4 = new javax.swing.JLabel();
        transmitSpeed = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        transmitTimeRemain = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        connectMenuItem = new javax.swing.JMenuItem();
        disconnectMenuItem = new javax.swing.JMenuItem();
        quitMenuItem = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JSeparator();
        addSiteMenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        abortMenu = new javax.swing.JMenuItem();
        executeCommandMenu = new javax.swing.JMenuItem();
        antiIdleMenu = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        localFileUploadMenu.setText("上传"); // NOI18N
        localFileUploadMenu.setEnabled(false);
        localFileUploadMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                localFileUploadMenuActionPerformed(evt);
            }
        });
        localFileListMenu.add(localFileUploadMenu);

        localFileToQueueMenu.setText("队列"); // NOI18N
        localFileToQueueMenu.setEnabled(false);
        localFileToQueueMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                localFileToQueueMenuActionPerformed(evt);
            }
        });
        localFileListMenu.add(localFileToQueueMenu);

        remoteFileDownloadMenu.setText("下载"); // NOI18N
        remoteFileDownloadMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remoteFileDownloadMenuActionPerformed(evt);
            }
        });
        remoteFileTableMenu.add(remoteFileDownloadMenu);

        remoteFileToQueueMenu.setText("队列"); // NOI18N
        remoteFileToQueueMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remoteFileToQueueMenuActionPerformed(evt);
            }
        });
        remoteFileTableMenu.add(remoteFileToQueueMenu);
        remoteFileTableMenu.add(jSeparator2);

        remoteFileRenameMenu.setText("重命名"); // NOI18N
        remoteFileRenameMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remoteFileRenameMenuActionPerformed(evt);
            }
        });
        remoteFileTableMenu.add(remoteFileRenameMenu);

        remoteFileRemoveMenu.setText("删除"); // NOI18N
        remoteFileRemoveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remoteFileRemoveMenuActionPerformed(evt);
            }
        });
        remoteFileTableMenu.add(remoteFileRemoveMenu);

        remoteFileMakeDirMenu.setText("建立文件夹"); // NOI18N
        remoteFileMakeDirMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remoteFileMakeDirMenuActionPerformed(evt);
            }
        });
        remoteFileTableMenu.add(remoteFileMakeDirMenu);
        remoteFileTableMenu.add(jSeparator4);

        remoteFileRefreshMenu.setText("刷新"); // NOI18N
        remoteFileRefreshMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remoteFileRefreshMenuActionPerformed(evt);
            }
        });
        remoteFileTableMenu.add(remoteFileRefreshMenu);

        transmitMenu.setText("传输"); // NOI18N
        transmitMenu.setEnabled(false);
        transmitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transmitMenuActionPerformed(evt);
            }
        });
        queueFileTableMenu.add(transmitMenu);
        queueFileTableMenu.add(jSeparator3);

        queueFileRemoveMenu.setText("删除"); // NOI18N
        queueFileRemoveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queueFileRemoveMenuActionPerformed(evt);
            }
        });
        queueFileTableMenu.add(queueFileRemoveMenu);

        queueFileToHeadMenu.setText("移动到队头"); // NOI18N
        queueFileToHeadMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queueFileToHeadMenuActionPerformed(evt);
            }
        });
        queueFileTableMenu.add(queueFileToHeadMenu);

        queueFileToTailMenu.setText("移动到队尾"); // NOI18N
        queueFileToTailMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queueFileToTailMenuActionPerformed(evt);
            }
        });
        queueFileTableMenu.add(queueFileToTailMenu);

        queueFileClearMenu.setText("清空队列"); // NOI18N
        queueFileClearMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                queueFileClearMenuActionPerformed(evt);
            }
        });
        queueFileTableMenu.add(queueFileClearMenu);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                onClosing(evt);
            }
        });

        jSplitPane1.setDividerLocation(350);

        wokDirectory.setEditable(true);
        wokDirectory.setEnabled(false);
        wokDirectory.setMaximumSize(new java.awt.Dimension(32, 19));
        wokDirectory.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                workDirectoryItemStateChangedHandler(evt);
            }
        });

        remoteFileTable.setAutoCreateRowSorter(true);
        remoteFileTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "文件名", "大小", "日期", "属性", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Long.class, java.lang.Object.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        remoteFileTable.setEnabled(false);
        remoteFileTable.setFillsViewportHeight(true);
        remoteFileTable.setShowHorizontalLines(false);
        remoteFileTable.setShowVerticalLines(false);
        remoteFileTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                remoteFileTableMouseClickedHandler(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                remoteFileTableMouseReleasedHandler(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                remoteFileTableMouseReleasedHandler(evt);
            }
        });
        jScrollPane1.setViewportView(remoteFileTable);
        remoteFileTable.getColumnModel().getColumn(0).setPreferredWidth(20);
        remoteFileTable.getColumnModel().getColumn(0).setMaxWidth(20);
        remoteFileTable.getColumnModel().getColumn(0).setCellRenderer(new IconTableCellRenderer());
        remoteFileTable.getColumnModel().getColumn(1).setMinWidth(18);
        remoteFileTable.getColumnModel().getColumn(1).setPreferredWidth(100);
        remoteFileTable.getColumnModel().getColumn(2).setCellRenderer(new FileSizeTableCellRenderer());
        remoteFileTable.getColumnModel().getColumn(5).setMinWidth(0);
        remoteFileTable.getColumnModel().getColumn(5).setPreferredWidth(0);
        remoteFileTable.getColumnModel().getColumn(5).setMaxWidth(0);

        workDirectoryUp.setText("上级目录"); // NOI18N
        workDirectoryUp.setEnabled(false);
        workDirectoryUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                workDirectoryUpActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 466, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(wokDirectory, 0, 379, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(workDirectoryUp))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(workDirectoryUp, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(wokDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {wokDirectory, workDirectoryUp});

        jSplitPane1.setRightComponent(jPanel1);

        File[] roots = File.listRoots();
        File pwd = new File(Util.getPresentWorkDirectory());
        File presentDriver = Util.getDriver(pwd);
        for(File f : roots){
            if(f.exists()){
                UIFile uiFile = new UIFile(f);
                localDirectoryComboBox.addItem(uiFile);
                if(f.equals(presentDriver)){
                    localDirectoryComboBox.setSelectedItem(uiFile);
                }
            }
        }

        localDirectoryComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                changeDriver(evt);
            }
        });

        localFileList.setCellRenderer(new FileListCellRenderer());
        localFileList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                localFileListMouseClickedHandler(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                localFileListMouseReleaseHandler(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                localFileListMouseReleaseHandler(evt);
            }
        });
        jScrollPane2.setViewportView(localFileList);

        pwdLabel.setText("当前目录："); // NOI18N
        pwdLabel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(localDirectoryComboBox, 0, 349, Short.MAX_VALUE)
            .addComponent(pwdLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(localDirectoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 289, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pwdLabel))
        );

        jSplitPane1.setLeftComponent(jPanel5);

        jSplitPane2.setDividerLocation(400);

        queueFileTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "文件", "大小", "目的"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Long.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        queueFileTable.setFillsViewportHeight(true);
        queueFileTable.setShowHorizontalLines(false);
        queueFileTable.setShowVerticalLines(false);
        queueFileTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                queueFileTableMouseHandler(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                queueFileTableMouseHandler(evt);
            }
        });
        jScrollPane3.setViewportView(queueFileTable);
        queueFileTable.getColumnModel().getColumn(0).setCellRenderer(new QueueFileTableCellRenderer());
        queueFileTable.getColumnModel().getColumn(1).setPreferredWidth(60);
        queueFileTable.getColumnModel().getColumn(1).setMaxWidth(60);
        queueFileTable.getColumnModel().getColumn(1).setCellRenderer(new FileSizeTableCellRenderer());

        jSplitPane2.setLeftComponent(jScrollPane3);

        displayArea.setEditable(false);
        jScrollPane4.setViewportView(displayArea);

        jSplitPane2.setRightComponent(jScrollPane4);

        host.setEditable(true);
        host.setMaximumSize(new java.awt.Dimension(32767, 21));

        jLabel1.setText("用户名"); // NOI18N

        username.setPreferredSize(new java.awt.Dimension(90, 21));

        jLabel2.setText("密码"); // NOI18N

        password.setMinimumSize(new java.awt.Dimension(21, 21));
        password.setPreferredSize(new java.awt.Dimension(90, 21));

        jLabel3.setText("端口"); // NOI18N

        port.setMinimumSize(new java.awt.Dimension(30, 21));
        port.setPreferredSize(new java.awt.Dimension(30, 21));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(host, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(264, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(3, 3, 3)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE))
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(6, 6, 6)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 17, Short.MAX_VALUE))
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(6, 6, 6)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 17, Short.MAX_VALUE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(host, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(username, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(password, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(port, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setMaximumSize(new java.awt.Dimension(2, 0));

        status.setText("未连接"); // NOI18N

        transmitProgressBar.setStringPainted(true);

        jLabel4.setText("速度:"); // NOI18N

        jLabel5.setText("剩余时间:"); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(status, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 4, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(transmitSpeed, javax.swing.GroupLayout.DEFAULT_SIZE, 10, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(transmitTimeRemain, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(transmitProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(status, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(transmitSpeed, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(transmitTimeRemain, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(transmitProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 19, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel4, jLabel5, status, transmitSpeed, transmitTimeRemain});

        jMenu1.setText("服务器"); // NOI18N

        connectMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, java.awt.event.InputEvent.CTRL_MASK));
        connectMenuItem.setText("连接"); // NOI18N
        connectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connect(evt);
            }
        });
        jMenu1.add(connectMenuItem);

        disconnectMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        disconnectMenuItem.setText("断开"); // NOI18N
        disconnectMenuItem.setEnabled(false);
        disconnectMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnect(evt);
            }
        });
        jMenu1.add(disconnectMenuItem);

        quitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK));
        quitMenuItem.setText("退出"); // NOI18N
        quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exit(evt);
            }
        });
        jMenu1.add(quitMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu5.setText("站点");

        jMenuItem4.setText("站点管理器");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem4);
        jMenu5.add(jSeparator5);

        addSiteMenu.setText("添加当前站点");
        addSiteMenu.setEnabled(false);
        addSiteMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSiteMenuActionPerformed(evt);
            }
        });
        jMenu5.add(addSiteMenu);

        jMenuBar1.add(jMenu5);

        jMenu2.setText("操作"); // NOI18N

        jMenu4.setText("设定"); // NOI18N

        jMenuItem1.setText("IO缓冲区"); // NOI18N
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setIOBufferSize(evt);
            }
        });
        jMenu4.add(jMenuItem1);

        jMenuItem3.setText("代理服务器");
        jMenu4.add(jMenuItem3);

        jMenu2.add(jMenu4);

        abortMenu.setText("终止");
        abortMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abortMenuActionPerformed(evt);
            }
        });
        jMenu2.add(abortMenu);

        executeCommandMenu.setText("执行原始命令");
        executeCommandMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeCommandMenuActionPerformed(evt);
            }
        });
        jMenu2.add(executeCommandMenu);

        antiIdleMenu.setText("反空闲");
        antiIdleMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                antiIdleMenuActionPerformed(evt);
            }
        });
        jMenu2.add(antiIdleMenu);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("帮助"); // NOI18N

        jMenuItem2.setText("关于"); // NOI18N
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                about(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 822, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 822, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * 文件夹节点收缩时的处理程序。
     * 主要是清除所有的节点
     * @param evt
     */
    private void displayStatus(String status) {
        this.status.setText(status);
    }

private void connect(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connect
    String username = null;
    String password = null;
    String host = (String) this.host.getEditor().getItem();
    if (host.trim().equals("")) {
        error("请填写服务器地址");
        return;
    }
    this.host.removeItem(host);
    this.host.insertItemAt(host, 0);
    this.host.setSelectedItem(host);
    if (!this.username.getText().trim().equals("")) {
        username = this.username.getText().trim();
        password = new String(this.password.getPassword());
    }
    int port = 0;
    if (!this.port.getText().trim().equals("")) {
        try {
            port = Integer.parseInt(this.port.getText().trim());
        } catch (NumberFormatException nfe) {
            error("端口号应该是一个数字");
            return;
        }
    }
    site = new Site();
    site.setHost(host);
    site.setPort(port);
    site.setUsername(username);
    site.setPassword(password);
    this.connect();
}//GEN-LAST:event_connect

private void disconnect(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnect
    if (model.getState() != FTPModel.State.UNCONNECTION) {
        Command c = new QuitCommand(controller);
        this.setCommand(c);
    }
}//GEN-LAST:event_disconnect

private void changeDriver(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_changeDriver
    if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
        UIFile driver = (UIFile) evt.getItem();
        controller.setLocalDirectory(driver.getFile().getAbsolutePath());
    }
}//GEN-LAST:event_changeDriver

private void localFileListMouseClickedHandler(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_localFileListMouseClickedHandler
    if (evt.getClickCount() == 2) {
        if (localFileList.getSelectedValue() instanceof UIFile) {
            UIFile uiFile = (UIFile) localFileList.getSelectedValue();
            if (uiFile.getFile().isDirectory()) {
                controller.setLocalDirectory(uiFile.getFile().getAbsolutePath());
            }
        }
    }
}//GEN-LAST:event_localFileListMouseClickedHandler

private void localFileListMouseReleaseHandler(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_localFileListMouseReleaseHandler
    if (evt.isPopupTrigger()) {
        if (localFileList.getSelectedValue() != null) {
            localFileListMenu.show(localFileList, evt.getX(), evt.getY());
        }
    }
}//GEN-LAST:event_localFileListMouseReleaseHandler

private void exit(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exit
    System.exit(0);
}//GEN-LAST:event_exit

private void localFileUploadMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_localFileUploadMenuActionPerformed
    this.localFileToQueueMenuActionPerformed(evt);//GEN-LAST:event_localFileUploadMenuActionPerformed
        this.transmitMenuActionPerformed(evt);
    }

private void localFileToQueueMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_localFileToQueueMenuActionPerformed
    Object[] uiFiles = localFileList.getSelectedValues();
    for (Object obj : uiFiles) {
        UIFile uiFile = (UIFile) obj;
        File f = uiFile.getFile();
        QueueFile queueFile = null;
        String srcDir = f.getParent();
        String destDir = model.getWorkDirectory();
        long size = f.length();
        String name = f.getName();
        if (f.isDirectory()) {
            queueFile = new DirectoryUploadQueueFile(name, srcDir, destDir, size);
        } else {
            queueFile = new FileUploadQueueFile(name, srcDir, destDir, size);
        }
        controller.addQueueFile(queueFile);
    }
}//GEN-LAST:event_localFileToQueueMenuActionPerformed

private void workDirectoryItemStateChangedHandler(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_workDirectoryItemStateChangedHandler
    if (evt.getStateChange() == java.awt.event.ItemEvent.SELECTED) {
        String wd = (String) evt.getItem();
        this.changeWorkDirectory(wd);
    }
}//GEN-LAST:event_workDirectoryItemStateChangedHandler
    private static final int REMOTE_FILE_TABLE_DIRECTORY_COLUMN_INDEX = 5;
    private static final int REMOTE_FILE_TABLE_FILENAME_COLUMN_INDEX = 1;
    private static final int REMOTE_FILE_TABLE_SIZE_COLUMN_INDEX = 2;

private void remoteFileTableMouseClickedHandler(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_remoteFileTableMouseClickedHandler
    if (evt.getClickCount() == 2 && remoteFileTable.isEnabled()) {
        if (remoteFileTable.getSelectedRowCount() == 0) {
            return;
        }
        int row = remoteFileTable.getSelectedRow();
        boolean isDirectory = (Boolean) remoteFileTable.getValueAt(row, REMOTE_FILE_TABLE_DIRECTORY_COLUMN_INDEX);
        if (isDirectory) {
            try {
                changeWorkDirectory((String) remoteFileTable.getValueAt(row, REMOTE_FILE_TABLE_FILENAME_COLUMN_INDEX));
            } catch (Exception exc) {
                this.displayError(exc.getMessage());
                exc.printStackTrace();
            }
        }
    }
}//GEN-LAST:event_remoteFileTableMouseClickedHandler

    private void changeWorkDirectory(String dir) {
        Command c = new ChangeWorkDirectoryCommand(controller, dir);
        this.setCommand(c);
    }

private void remoteFileToQueueMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remoteFileToQueueMenuActionPerformed

    int[] rows = remoteFileTable.getSelectedRows();
    for (int row : rows) {
        boolean isDirectory = (Boolean) remoteFileTable.getValueAt(row, REMOTE_FILE_TABLE_DIRECTORY_COLUMN_INDEX);
        String name = (String) remoteFileTable.getValueAt(row, REMOTE_FILE_TABLE_FILENAME_COLUMN_INDEX);
        String srcDir = model.getWorkDirectory();
        long size = (Long) remoteFileTable.getValueAt(row, REMOTE_FILE_TABLE_SIZE_COLUMN_INDEX);
        String destDir = model.getLocalDirectory();
        QueueFile queueFile = null;
        if (isDirectory) {
            queueFile = new DirectoryDownloadQueueFile(name, srcDir, destDir, size);
        } else {
            queueFile = new FileDownloadQueueFile(name, srcDir, destDir, size);
        }
        controller.addQueueFile(queueFile);
    }
}//GEN-LAST:event_remoteFileToQueueMenuActionPerformed

private void remoteFileTableMouseReleasedHandler(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_remoteFileTableMouseReleasedHandler
    if (evt.isPopupTrigger() && remoteFileTable.isEnabled()) {
        boolean enable = remoteFileTable.getSelectedRowCount() == 1 ? true : false;
        remoteFileRenameMenu.setEnabled(enable);
        remoteFileTableMenu.show(remoteFileTable, evt.getX(), evt.getY());
    }
}//GEN-LAST:event_remoteFileTableMouseReleasedHandler

    /**
     * 返回一个倒序的，选中的队列文件列表
     * @return
     */
    private List<QueueFile> getSelectedQueueFile() {
        final int queueFileColumnIndex = 0;
        List<QueueFile> list = new ArrayList<QueueFile>();
        int[] rows = queueFileTable.getSelectedRows();
        for (int i = rows.length - 1; i >= 0; i--) {
            int row = rows[i];
            list.add((QueueFile) queueFileTable.getValueAt(row, queueFileColumnIndex));
        }
        return list;
    }

private void queueFileRemoveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queueFileRemoveMenuActionPerformed
    List<QueueFile> list = this.getSelectedQueueFile();
    for (QueueFile file : list) {
        controller.remove(file);
    }
}//GEN-LAST:event_queueFileRemoveMenuActionPerformed

private void queueFileToHeadMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queueFileToHeadMenuActionPerformed
    List<QueueFile> list = this.getSelectedQueueFile();
    for (QueueFile file : list) {
        controller.moveToHead(file);
    }
}//GEN-LAST:event_queueFileToHeadMenuActionPerformed

private void queueFileToTailMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queueFileToTailMenuActionPerformed
    List<QueueFile> list = this.getSelectedQueueFile();
    for (QueueFile file : list) {
        controller.moveToTail(file);
    }
}//GEN-LAST:event_queueFileToTailMenuActionPerformed

private void queueFileClearMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_queueFileClearMenuActionPerformed
    controller.clearQueue();
}//GEN-LAST:event_queueFileClearMenuActionPerformed

private void transmitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transmitMenuActionPerformed
    Command c = new TransmitCommand(controller);
    this.setCommand(c);
}//GEN-LAST:event_transmitMenuActionPerformed

    private void displayError(String error) {
        this.displayMessage(Color.RED, error);
    }

private void remoteFileRefreshMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remoteFileRefreshMenuActionPerformed
    Command c = new ListCommand(controller);
    this.setCommand(c);
}//GEN-LAST:event_remoteFileRefreshMenuActionPerformed

private void remoteFileMakeDirMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remoteFileMakeDirMenuActionPerformed
    String dirname = JOptionPane.showInputDialog(this, "文件夹名称", "新建文件夹", JOptionPane.QUESTION_MESSAGE);
    if (dirname == null) {
        return;
    }
    Command c = new MakeDirectoryCommand(controller, dirname);
    this.setCommand(c);
}//GEN-LAST:event_remoteFileMakeDirMenuActionPerformed

private void remoteFileDownloadMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remoteFileDownloadMenuActionPerformed
    this.remoteFileToQueueMenuActionPerformed(evt);
    this.transmitMenuActionPerformed(evt);
}//GEN-LAST:event_remoteFileDownloadMenuActionPerformed

private void onClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_onClosing
    if (model.getState() != FTPModel.State.UNCONNECTION) {
        Command c = new QuitCommand(controller);
        setCommand(c);
    }
    commandInvoker.interrupt();
}//GEN-LAST:event_onClosing

private void workDirectoryUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_workDirectoryUpActionPerformed
    Command c = new ChangeWorkDirectoryUpCommand(controller);
    this.setCommand(c);
}//GEN-LAST:event_workDirectoryUpActionPerformed

private void remoteFileRenameMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remoteFileRenameMenuActionPerformed
    int row = remoteFileTable.getSelectedRow();
    if (row == -1) {
        return;//没有选择任何文件
    }
    String originName = (String) remoteFileTable.getValueAt(row, REMOTE_FILE_TABLE_FILENAME_COLUMN_INDEX);
    String newName = JOptionPane.showInputDialog(this, "输入新文件名", originName);
    if (newName != null) {
        RenameCommand c = new RenameCommand(controller);
        c.setNewName(newName);
        c.setOrginName(originName);
        this.setCommand(c);
    }
}//GEN-LAST:event_remoteFileRenameMenuActionPerformed

private void remoteFileRemoveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remoteFileRemoveMenuActionPerformed
    int[] rows = remoteFileTable.getSelectedRows();
    final String[] filenameArray = new String[rows.length];
    final boolean[] isDirectoryArray = new boolean[rows.length];
    int confirm = JOptionPane.showConfirmDialog(this, "确定要删除这些文件吗？", "确认删除", JOptionPane.YES_NO_OPTION);
    if (confirm == JOptionPane.NO_OPTION) {
        return;
    }
    for (int i = 0; i < rows.length; i++) {
        filenameArray[i] = (String) remoteFileTable.getValueAt(rows[i], REMOTE_FILE_TABLE_FILENAME_COLUMN_INDEX);
        isDirectoryArray[i] = (Boolean) remoteFileTable.getValueAt(rows[i], REMOTE_FILE_TABLE_DIRECTORY_COLUMN_INDEX);

    }
    for (int i = 0; i < filenameArray.length; i++) {
        Command c = null;
        if (isDirectoryArray[i]) {
            c = new RemoveDirectoryCommand(controller, filenameArray[i]);
        } else {
            c = new RemoveFileCommand(controller, filenameArray[i]);
        }
        this.addCommand(c);
    }
}//GEN-LAST:event_remoteFileRemoveMenuActionPerformed

private void setIOBufferSize(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setIOBufferSize
    String size = JOptionPane.showInputDialog(this, "输入IO缓冲区大小，单位Kb，至少为1", model.getIOBufferSize() / 1024);
    int intSize = 0;
    if (size != null) {
        intSize = Integer.parseInt(size);
        if (intSize < 1) {
            this.error("输入的缓冲区太小，无效！");
        }
        controller.setIOBufferSize(intSize * 1024);
    }
}//GEN-LAST:event_setIOBufferSize

private void queueFileTableMouseHandler(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_queueFileTableMouseHandler
    if (evt.isPopupTrigger()) {
        if (queueFileTable.getSelectedColumnCount() > 0) {
            queueFileToHeadMenu.setEnabled(true);
            queueFileToTailMenu.setEnabled(true);
            queueFileRemoveMenu.setEnabled(true);
            queueFileClearMenu.setEnabled(true);
        } else {
            queueFileToHeadMenu.setEnabled(false);
            queueFileToTailMenu.setEnabled(false);
            queueFileRemoveMenu.setEnabled(false);
            queueFileClearMenu.setEnabled(false);
        }
        queueFileTableMenu.show(queueFileTable, evt.getX(), evt.getY());
    }
}//GEN-LAST:event_queueFileTableMouseHandler

private void about(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_about
    JOptionPane.showMessageDialog(this, "给可爱的玲玲", "关于", JOptionPane.INFORMATION_MESSAGE);
}//GEN-LAST:event_about

private void abortMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abortMenuActionPerformed
    try {
        controller.abort();
    } catch (Exception exc) {
        exc.printStackTrace();
        this.displayError(exc.getMessage());
    }
}//GEN-LAST:event_abortMenuActionPerformed

private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
    SiteDialog sd = new SiteDialog(this, true);
    sd.setVisible(true);
    int result = sd.getValue();
    if(result == SiteDialog.CONNECT_OPERATION){
        site = sd.getSite();
        if(site.getHost() == null){
            String host = JOptionPane.showInputDialog(this, "FTP服务器地址：");
            if(host == null)
                return;
            site.setHost(host);
        }
        this.connect();
    }
}//GEN-LAST:event_jMenuItem4ActionPerformed

private void addSiteMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSiteMenuActionPerformed
    String name = JOptionPane.showInputDialog(this, "输入站点名称", "添加站点", JOptionPane.PLAIN_MESSAGE);
    if(name != null){
        this.site.setName(name);
        SiteManager siteManager = SiteManager.getInstance();
        if(siteManager.add(site)){
            try{
                siteManager.save();
            }catch(Exception exc){
                this.displayError("无法保存站点:" + exc.getMessage());
                exc.printStackTrace();
            }
        }else{
            error("名称为" + name + "的站点已经存在");
        }
    }
}//GEN-LAST:event_addSiteMenuActionPerformed

private void executeCommand(String commandString){
    Command command = new ExecuteCommand(controller, commandString);
    this.addCommand(command);
}

private void executeCommandMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeCommandMenuActionPerformed
    String commandString = JOptionPane.showInputDialog(this, "输入命令：", "执行原始命令", JOptionPane.PLAIN_MESSAGE);
    if(commandString == null)
        return;
    executeCommand(commandString);
}//GEN-LAST:event_executeCommandMenuActionPerformed

private void antiIdleMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_antiIdleMenuActionPerformed
    AntiIdleDialog dialog = new AntiIdleDialog(this, true);
    dialog.setVisible(true);
    if(dialog.getValue() == AntiIdleDialog.OK_VALUE){
        this.getAntiIdleConfig();
    }
}//GEN-LAST:event_antiIdleMenuActionPerformed

private void connect(){
    LoginCommand c = new LoginCommand(controller, site);
    this.setCommand(c);
}

/**
 * 显示选定目录下的文件列表
 */
private void showFiles(File file){
    assert file.isDirectory();
    final Icon parentIcon = Util.getIcon("/snailftp/resource/parent.gif");
    DefaultListModel listModel = new DefaultListModel();
    if(!Util.isRoot(file)){
        //不是根目录，添加一个返回父目录的项
        UIFile parent = new UIFile(file.getParentFile());
        parent.setDisplayName("..");
        parent.setIcon(parentIcon);
        listModel.addElement(parent);
    }
    File[] files = file.listFiles();
    List<UIFile> uiFileList = new ArrayList<UIFile>(files.length);
    for(File f : files){
        uiFileList.add(new UIFile(f));
    }
    Collections.sort(uiFileList);
    for(UIFile uiFile : uiFileList){
        listModel.addElement(uiFile);
    }
    localFileList.setModel(listModel);
}

/**
 * 显示远程文件
 * @param message
 */
private void showRemoteFiles(List<FTPFile> list){
    DefaultTableModel tableModel = (DefaultTableModel)remoteFileTable.getModel();
    while(tableModel.getRowCount() > 0){
        tableModel.removeRow(0);
    }
    final Icon dirIcon = Util.getIcon("/snailftp/resource/dir.jpg");
    final Icon fileIcon = Util.getIcon("/snailftp/resource/file.jpg");
    final String dateFormat = "yyyy-MM-DD hh:mm";
    Collections.sort(list);
    for(FTPFile file : list){
        Icon icon = file.isDirectory() ? dirIcon : fileIcon;
        tableModel.addRow(new Object[]{icon, file.getName(), file.getSize(),
            Util.formatDate(file.getCreateAt(), dateFormat), file.getAttribute(), file.isDirectory()});
    }
}

private void displayMessage(Color color, String text){
    SimpleAttributeSet set = new SimpleAttributeSet();
    StyleConstants.setForeground(set, color);
    StyledDocument doc = displayArea.getStyledDocument();
    try{
        doc.insertString(doc.getLength(), text, set);
        doc.insertString(doc.getLength(), "\n", set);
        this.displayArea.setCaretPosition(this.displayArea.getDocument().getLength());
    }catch(BadLocationException ble){
        //empty
    }
}

private void error(Object msg){
    JOptionPane.showMessageDialog(this, msg, "错误", JOptionPane.ERROR_MESSAGE);
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem abortMenu;
    private javax.swing.JMenuItem addSiteMenu;
    private javax.swing.JMenuItem antiIdleMenu;
    private javax.swing.JMenuItem connectMenuItem;
    private javax.swing.JMenuItem disconnectMenuItem;
    private javax.swing.JTextPane displayArea;
    private javax.swing.JMenuItem executeCommandMenu;
    private javax.swing.JComboBox host;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JComboBox localDirectoryComboBox;
    private javax.swing.JList localFileList;
    private javax.swing.JPopupMenu localFileListMenu;
    private javax.swing.JMenuItem localFileToQueueMenu;
    private javax.swing.JMenuItem localFileUploadMenu;
    private javax.swing.JPasswordField password;
    private javax.swing.JTextField port;
    private javax.swing.JLabel pwdLabel;
    private javax.swing.JMenuItem queueFileClearMenu;
    private javax.swing.JMenuItem queueFileRemoveMenu;
    private javax.swing.JTable queueFileTable;
    private javax.swing.JPopupMenu queueFileTableMenu;
    private javax.swing.JMenuItem queueFileToHeadMenu;
    private javax.swing.JMenuItem queueFileToTailMenu;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JMenuItem remoteFileDownloadMenu;
    private javax.swing.JMenuItem remoteFileMakeDirMenu;
    private javax.swing.JMenuItem remoteFileRefreshMenu;
    private javax.swing.JMenuItem remoteFileRemoveMenu;
    private javax.swing.JMenuItem remoteFileRenameMenu;
    private javax.swing.JTable remoteFileTable;
    private javax.swing.JPopupMenu remoteFileTableMenu;
    private javax.swing.JMenuItem remoteFileToQueueMenu;
    private javax.swing.JLabel status;
    private javax.swing.JMenuItem transmitMenu;
    private javax.swing.JProgressBar transmitProgressBar;
    private javax.swing.JLabel transmitSpeed;
    private javax.swing.JLabel transmitTimeRemain;
    private javax.swing.JTextField username;
    private javax.swing.JComboBox wokDirectory;
    private javax.swing.JButton workDirectoryUp;
    // End of variables declaration//GEN-END:variables


    public OverridePolicy getOverridePolicy(QueueFile queueFile) {
        String[] options = new String[]{"覆盖","全部覆盖", "跳过", "全部跳过", "取消"};
        StringBuffer message = new StringBuffer();
        message.append("<html>");
        message.append("文件:<b>");
        message.append(queueFile.getTo());
        message.append("</b>已经存在\n");
        message.append("是否替换？");
        message.append("</html>");
        int index = JOptionPane.showOptionDialog(this, message.toString(), "覆盖文件", JOptionPane.DEFAULT_OPTION,
                JOptionPane.QUESTION_MESSAGE, null, options, "取消");
        switch(index){
            case 0 : return OverridePolicy.OVERRIDE;
            case 1 : return OverridePolicy.OVERRIDE_ALL;
            case 2 : return OverridePolicy.SKIP;
            case 3 : return OverridePolicy.SKIP_ALL;
            case 4 : return OverridePolicy.CANCEL;
            default : return OverridePolicy.CANCEL;
        }
    }

    public void update(String command) {
        this.displayMessage(Color.BLUE, command);
    }

    public void update(Reply reply) {
        this.displayMessage(Color.GRAY, reply.toString());
    }

    private void showQueueFiles(FileQueue queue){
        DefaultTableModel tableModel = (DefaultTableModel)queueFileTable.getModel();
        while(tableModel.getRowCount() > 0){
            tableModel.removeRow(0);
        }
        Iterator<QueueFile> it = queue.iterator();
        while(it.hasNext()){
            QueueFile queueFile = it.next();
            tableModel.addRow(new Object[]{queueFile, queueFile.getSize(), queueFile.getTo()});
        }
    }
    public void update(final FileQueue queue) {
        EventQueue.invokeLater(new Runnable(){
            public void run(){
                showQueueFiles(queue);
            }
        });
    }
    
    public void update(final List<FTPFile> fileList) {
        EventQueue.invokeLater(new Runnable(){
            public void run(){
                showRemoteFiles(fileList);
            }
        });
    }

    public void onConnect() {
        this.connectMenuItem.setEnabled(false);
        this.disconnectMenuItem.setEnabled(true);
        this.wokDirectory.setEnabled(true);
        this.localFileUploadMenu.setEnabled(true);
        this.remoteFileTable.setEnabled(true);
        this.localFileToQueueMenu.setEnabled(true);
        this.transmitMenu.setEnabled(true);
        this.workDirectoryUp.setEnabled(true);
        this.username.setText(model.getUsername());
        this.password.setText(model.getPassword());
        this.host.getEditor().setItem(model.getHost());
        this.port.setText(model.getPort() + "");
        addSiteMenu.setEnabled(true);
        this.displayStatus("已连接");
    }

    public void onDisconnect() {
        this.connectMenuItem.setEnabled(true);
        this.disconnectMenuItem.setEnabled(false);
        this.wokDirectory.setEnabled(false);
        this.localFileUploadMenu.setEnabled(false);
        this.remoteFileTable.setEnabled(false);
        this.localFileToQueueMenu.setEnabled(false);
        this.transmitMenu.setEnabled(false);
        this.workDirectoryUp.setEnabled(false);
        addSiteMenu.setEnabled(false);
        this.displayError("已断开连接");
    }
    
    public void update(final String localDirectory, final String remoteDirectory) {
        SwingUtilities.invokeLater(new Runnable(){
            public void run(){
                if(localDirectory != null){
                    showFiles(new File(localDirectory));
                    pwdLabel.setText("当前目录" + localDirectory);
                }
                if(remoteDirectory != null){
                    if(!remoteDirectory.equals(wokDirectory.getSelectedItem())){
                        wokDirectory.removeItem(remoteDirectory);
                        wokDirectory.addItem(remoteDirectory);
                        wokDirectory.setSelectedIndex(-1);
                        wokDirectory.getEditor().setItem(remoteDirectory);
                    }
                }
            }
        });
    }

    private String lastFileName;
    private void updateTransmitStatus(){
        String filename = model.getCurrentFilename();
        if(filename == null){
            return;
        }
        if(!filename.equals(lastFileName)){
            //一个文件传输完成，更新以下本地目录
            this.showFiles(new File(model.getLocalDirectory()));
        }
        long size = model.getTotalSize();
        long transfered = model.getTransferedSize();
        long timePassed = model.getTimePassed();
        double secondPassed = (double)timePassed / 1000;
        int speed = (int)(transfered / secondPassed) + 1;//每秒传输的字节
        int timeRemain = (int)((size - transfered) / speed);
        String speedString = Util.formatFileSize(speed) + "/秒";
        transmitSpeed.setText(speedString);
        transmitTimeRemain.setText(Util.formatTime(timeRemain));
        this.displayStatus("正在传输文件 :" + filename);
        int progress = (int)((double)transfered / size * 100);
        this.transmitProgressBar.setValue(progress);
    }
    public void update(Message message) {
        Color c = null;
        switch(message.getLevel()){
            case Message.DEBUG : 
                c = Color.GREEN;
                break;
            case Message.INFO :
                c = Color.BLACK;
                break;
            case Message.WARN :
                c = Color.PINK;
                break;
            case Message.ERROR : 
            case Message.FATAL:
                c = Color.RED;
        }
        this.displayMessage(c, message.toString());
    }

    public void update(State s) {
        switch(s){
            case UNCONNECTION :
                SwingUtilities.invokeLater(new Runnable(){
                    public void run(){
                        onDisconnect();
                    }
                });
                
                break;
            case IDLE : 
                SwingUtilities.invokeLater(new Runnable(){
                    public void run(){
                        onConnect();
                        displayStatus("空闲");
                    }
                });
                break;
            case TRANSMIT :
                
        }
    }
    /**
     * 执行命令
     */
    private boolean antiIdleAnable = false;
    private Command antiIdleCommand = null;
    private int antiIdleWait = 1;
    private void getAntiIdleConfig(){
        this.antiIdleAnable = config.getBoolean(Config.ANTIIDLE_ENABLE_KEY);
        this.antiIdleWait = config.getInteger(Config.ANTIIDLE_WAIT_KEY, 1);
        if(this.antiIdleAnable){
            String commandString = config.getString(Config.ANTIIDLE_COMMAND_KEY);
            this.antiIdleCommand = new ExecuteCommand(controller, commandString);
        }
    }
    
    public void run() {
        while(true){
            try{
                Command command = commandQueue.poll(this.antiIdleWait, TimeUnit.SECONDS);
                if(command == null){
                    if(this.antiIdleAnable && model.getState() != FTPModel.State.UNCONNECTION){
                        //执行反空闲命令，否则什么都不做
                        this.antiIdleCommand.execute();
                    }
                }else{
                    command.execute();
                }
            }catch(InterruptedException ie){
                break;
            }catch(Exception exc){
                exc.printStackTrace();
                this.displayError(exc.getMessage());
            }
        }
    }

    final int delay = 200;
    javax.swing.Timer transmitTimer = new javax.swing.Timer(delay, new ActionListener(){
            public void actionPerformed(ActionEvent e) {
                updateTransmitStatus();
            }
        });
    public void beginTransmit() {
        transmitTimer.start();
    }

    public void onEndTransmit(){
        this.transmitProgressBar.setValue(100);
    }
    public void endTransmit() {
        transmitTimer.stop();
        SwingUtilities.invokeLater(new Runnable(){
            public void run(){
                onEndTransmit();
            }
        });
    }
}
